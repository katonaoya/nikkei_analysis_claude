#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Enhanced Precision System V3 ÂÆüÈÅãÁî®Ê§úË®º„Çπ„ÇØ„É™„Éó„Éà
Êó•Â∏∏ÈÅãÁî®„Åß„ÅÆÂÆüÈöõ„ÅÆÁ≤æÂ∫¶„Å®ÂïèÈ°åÁÇπ„ÇíË©≥Á¥∞„Å´Ê§úË®º
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

# „É≠„Ç∞Ë®≠ÂÆö
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class RealWorldValidator:
    """ÂÆüÈÅãÁî®Ê§úË®º„ÇØ„É©„Çπ"""
    
    def __init__(self):
        """ÂàùÊúüÂåñ"""
        # „Ç¶„Ç©„Éº„ÇØ„Éï„Ç©„ÉØ„Éº„ÉâÁµêÊûúÔºàEnhanced V3„Åã„ÇâÂèñÂæóÔºâ
        self.walkforward_results = [
            {"period": "2018-10-15 to 2018-11-13", "accuracy": 0.7852, "precision": 0.7696},
            {"period": "2018-11-13 to 2018-12-13", "accuracy": 0.7807, "precision": 0.7641},
            {"period": "2018-12-13 to 2019-01-21", "accuracy": 0.7942, "precision": 0.8187},
            {"period": "2019-01-21 to 2019-02-20", "accuracy": 0.7559, "precision": 0.7874},
            {"period": "2019-02-20 to 2019-03-22", "accuracy": 0.7819, "precision": 0.7398},
            {"period": "2019-03-22 to 2019-04-22", "accuracy": 0.8014, "precision": 0.8097},
            {"period": "2019-04-22 to 2019-05-29", "accuracy": 0.7879, "precision": 0.6795},
            {"period": "2019-05-29 to 2019-06-27", "accuracy": 0.7825, "precision": 0.7698},
            {"period": "2019-06-27 to 2019-07-29", "accuracy": 0.8039, "precision": 0.7834},
            {"period": "2019-07-29 to 2019-08-28", "accuracy": 0.7804, "precision": 0.6554},
            {"period": "2019-08-28 to 2019-09-30", "accuracy": 0.7583, "precision": 0.8486},
            {"period": "2019-09-30 to 2019-10-31", "accuracy": 0.7964, "precision": 0.8258},
            {"period": "2019-10-31 to 2019-12-02", "accuracy": 0.7705, "precision": 0.8233},
            {"period": "2019-12-02 to 2020-01-06", "accuracy": 0.7997, "precision": 0.7731},
            {"period": "2020-01-06 to 2020-02-05", "accuracy": 0.7958, "precision": 0.7453},
            {"period": "2020-02-05 to 2020-03-09", "accuracy": 0.8441, "precision": 0.7249},
            {"period": "2020-03-09 to 2020-04-08", "accuracy": 0.8123, "precision": 0.9136},
            {"period": "2020-04-08 to 2020-05-13", "accuracy": 0.7471, "precision": 0.8130},
            {"period": "2020-05-13 to 2020-06-11", "accuracy": 0.8074, "precision": 0.8730},
            {"period": "2020-06-11 to 2020-07-10", "accuracy": 0.7407, "precision": 0.7678},
            {"period": "2020-07-10 to 2020-08-13", "accuracy": 0.8172, "precision": 0.8648},
            {"period": "2020-08-13 to 2020-09-11", "accuracy": 0.7246, "precision": 0.7595},
            {"period": "2020-09-11 to 2020-10-15", "accuracy": 0.8160, "precision": 0.7621},
            {"period": "2020-10-15 to 2020-11-16", "accuracy": 0.7658, "precision": 0.8648},
            {"period": "2020-11-16 to 2020-12-16", "accuracy": 0.8003, "precision": 0.8716},
            {"period": "2020-12-16 to 2021-01-19", "accuracy": 0.8112, "precision": 0.8761},
            {"period": "2021-01-19 to 2021-02-18", "accuracy": 0.8042, "precision": 0.8715},
            {"period": "2021-02-18 to 2021-03-22", "accuracy": 0.7846, "precision": 0.8588},
            {"period": "2021-03-22 to 2021-04-20", "accuracy": 0.7864, "precision": 0.7283},
            {"period": "2021-04-20 to 2021-05-25", "accuracy": 0.7846, "precision": 0.8159},
            {"period": "2021-05-25 to 2021-06-23", "accuracy": 0.7859, "precision": 0.7816},
            {"period": "2021-06-23 to 2021-07-26", "accuracy": 0.7741, "precision": 0.7274},
            {"period": "2021-07-26 to 2021-08-25", "accuracy": 0.7861, "precision": 0.7375},
            {"period": "2021-08-25 to 2021-09-27", "accuracy": 0.7795, "precision": 0.8409},
            {"period": "2021-09-27 to 2021-10-26", "accuracy": 0.7982, "precision": 0.8021},
            {"period": "2021-10-26 to 2021-11-26", "accuracy": 0.7844, "precision": 0.7705},
            {"period": "2021-11-26 to 2021-12-27", "accuracy": 0.7898, "precision": 0.8318},
            {"period": "2021-12-27 to 2022-01-28", "accuracy": 0.7784, "precision": 0.7741},
            {"period": "2022-01-28 to 2022-03-02", "accuracy": 0.7769, "precision": 0.7490},
            {"period": "2022-03-02 to 2022-04-01", "accuracy": 0.8196, "precision": 0.8293},
            {"period": "2022-04-01 to 2022-05-06", "accuracy": 0.7724, "precision": 0.7301},
            {"period": "2022-05-06 to 2022-06-06", "accuracy": 0.7756, "precision": 0.8090},
            {"period": "2022-06-06 to 2022-07-05", "accuracy": 0.7828, "precision": 0.7593},
            {"period": "2022-07-05 to 2022-08-04", "accuracy": 0.7745, "precision": 0.7771},
            {"period": "2022-08-04 to 2022-09-05", "accuracy": 0.7596, "precision": 0.6958},
            {"period": "2022-09-05 to 2022-10-06", "accuracy": 0.7642, "precision": 0.7060},
            {"period": "2022-10-06 to 2022-11-08", "accuracy": 0.7845, "precision": 0.8198},
            {"period": "2022-11-08 to 2022-12-08", "accuracy": 0.7879, "precision": 0.7831},
            {"period": "2022-12-08 to 2023-01-11", "accuracy": 0.7879, "precision": 0.6782},
            {"period": "2023-01-11 to 2023-02-09", "accuracy": 0.7930, "precision": 0.8471},
            {"period": "2023-02-09 to 2023-03-13", "accuracy": 0.8080, "precision": 0.7991},
            {"period": "2023-03-13 to 2023-04-12", "accuracy": 0.7600, "precision": 0.7584},
            {"period": "2023-04-12 to 2023-05-16", "accuracy": 0.7862, "precision": 0.8352},
            {"period": "2023-05-16 to 2023-06-14", "accuracy": 0.7812, "precision": 0.9259},
            {"period": "2023-06-14 to 2023-07-13", "accuracy": 0.7801, "precision": 0.6952},
            {"period": "2023-07-13 to 2023-08-15", "accuracy": 0.7799, "precision": 0.7807},
            {"period": "2023-08-15 to 2023-09-13", "accuracy": 0.7805, "precision": 0.8096},
            {"period": "2023-09-13 to 2023-10-16", "accuracy": 0.8040, "precision": 0.7684},
            {"period": "2023-10-16 to 2023-11-15", "accuracy": 0.7843, "precision": 0.8121},
            {"period": "2023-11-15 to 2023-12-15", "accuracy": 0.8044, "precision": 0.8378},
            {"period": "2023-12-15 to 2024-01-19", "accuracy": 0.7640, "precision": 0.8743},
            {"period": "2024-01-19 to 2024-02-20", "accuracy": 0.7651, "precision": 0.7638},
            {"period": "2024-02-20 to 2024-03-22", "accuracy": 0.8040, "precision": 0.8457},
            {"period": "2024-03-22 to 2024-04-22", "accuracy": 0.7558, "precision": 0.7198},
            {"period": "2024-04-22 to 2024-05-24", "accuracy": 0.7784, "precision": 0.7658},
            {"period": "2024-05-24 to 2024-06-24", "accuracy": 0.7939, "precision": 0.7996},
            {"period": "2024-06-24 to 2024-07-24", "accuracy": 0.8025, "precision": 0.8203},
            {"period": "2024-07-24 to 2024-08-23", "accuracy": 0.7926, "precision": 0.8225},
            {"period": "2024-08-23 to 2024-09-25", "accuracy": 0.7731, "precision": 0.7834},
            {"period": "2024-09-25 to 2024-10-25", "accuracy": 0.7655, "precision": 0.7374},
            {"period": "2024-10-25 to 2024-11-26", "accuracy": 0.7799, "precision": 0.8237},
            {"period": "2024-11-26 to 2024-12-25", "accuracy": 0.7892, "precision": 0.8188},
            {"period": "2024-12-25 to 2025-01-30", "accuracy": 0.7966, "precision": 0.8614},
            {"period": "2025-01-30 to 2025-03-04", "accuracy": 0.7752, "precision": 0.7561},
            {"period": "2025-03-04 to 2025-04-03", "accuracy": 0.7704, "precision": 0.6833},
            {"period": "2025-04-03 to 2025-05-07", "accuracy": 0.7879, "precision": 0.8179},
            {"period": "2025-05-07 to 2025-06-05", "accuracy": 0.7998, "precision": 0.7854},
            {"period": "2025-06-05 to 2025-07-04", "accuracy": 0.8006, "precision": 0.8294},
            {"period": "2025-07-04 to 2025-08-05", "accuracy": 0.7674, "precision": 0.8272},
            {"period": "2025-08-05 to 2025-09-04", "accuracy": 0.7958, "precision": 0.8418}
        ]
        
        self.df = pd.DataFrame(self.walkforward_results)
        
        # Âõ≥Ë°®‰øùÂ≠ò„Éá„Ç£„É¨„ÇØ„Éà„É™
        self.output_dir = Path("validation_results")
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        logger.info(f"ÂÆüÈÅãÁî®Ê§úË®º„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫Ü: {len(self.walkforward_results)}ÊúüÈñì„ÅÆ„Éá„Éº„Çø")
    
    def analyze_basic_statistics(self):
        """Âü∫Êú¨Áµ±Ë®àÂàÜÊûê"""
        logger.info("üìä Âü∫Êú¨Áµ±Ë®àÂàÜÊûêÈñãÂßã...")
        
        # Âü∫Êú¨Áµ±Ë®à
        accuracy_stats = self.df['accuracy'].describe()
        precision_stats = self.df['precision'].describe()
        
        print("\n" + "="*60)
        print("üìä Enhanced Precision System V3 ÂÆüÈÅãÁî®Áµ±Ë®àÂàÜÊûê")
        print("="*60)
        
        print(f"\nüéØ Á≤æÂ∫¶ÔºàAccuracyÔºâÁµ±Ë®à:")
        print(f"   Âπ≥Âùá: {accuracy_stats['mean']:.3f} ({accuracy_stats['mean']*100:.1f}%)")
        print(f"   ‰∏≠Â§ÆÂÄ§: {accuracy_stats['50%']:.3f} ({accuracy_stats['50%']*100:.1f}%)")
        print(f"   Ê®ôÊ∫ñÂÅèÂ∑Æ: {accuracy_stats['std']:.3f} ({accuracy_stats['std']*100:.1f}%)")
        print(f"   ÊúÄÂ§ßÂÄ§: {accuracy_stats['max']:.3f} ({accuracy_stats['max']*100:.1f}%)")
        print(f"   ÊúÄÂ∞èÂÄ§: {accuracy_stats['min']:.3f} ({accuracy_stats['min']*100:.1f}%)")
        print(f"   75%ile: {accuracy_stats['75%']:.3f} ({accuracy_stats['75%']*100:.1f}%)")
        print(f"   25%ile: {accuracy_stats['25%']:.3f} ({accuracy_stats['25%']*100:.1f}%)")
        
        print(f"\nüîç ÈÅ©ÂêàÁéáÔºàPrecisionÔºâÁµ±Ë®à:")
        print(f"   Âπ≥Âùá: {precision_stats['mean']:.3f} ({precision_stats['mean']*100:.1f}%)")
        print(f"   ‰∏≠Â§ÆÂÄ§: {precision_stats['50%']:.3f} ({precision_stats['50%']*100:.1f}%)")
        print(f"   Ê®ôÊ∫ñÂÅèÂ∑Æ: {precision_stats['std']:.3f} ({precision_stats['std']*100:.1f}%)")
        print(f"   ÊúÄÂ§ßÂÄ§: {precision_stats['max']:.3f} ({precision_stats['max']*100:.1f}%)")
        print(f"   ÊúÄÂ∞èÂÄ§: {precision_stats['min']:.3f} ({precision_stats['min']*100:.1f}%)")
        
        return accuracy_stats, precision_stats
    
    def analyze_consistency(self):
        """‰∏ÄË≤´ÊÄßÂàÜÊûê"""
        logger.info("üìà ‰∏ÄË≤´ÊÄß„ÉªÂÆâÂÆöÊÄßÂàÜÊûêÈñãÂßã...")
        
        accuracies = self.df['accuracy']
        precisions = self.df['precision']
        
        # ÈñæÂÄ§Âà•ÂàÜÊûê
        thresholds = [0.70, 0.75, 0.80, 0.85]
        
        print(f"\nüìà ÂÆâÂÆöÊÄß„Éª‰∏ÄË≤´ÊÄßÂàÜÊûê:")
        print(f"   Ê§úË®ºÊúüÈñì: {len(self.df)}ÊúüÈñì (2018Âπ¥10Êúà„Äú2025Âπ¥9Êúà)")
        
        for threshold in thresholds:
            acc_above = (accuracies >= threshold).sum()
            acc_rate = acc_above / len(accuracies) * 100
            
            prec_above = (precisions >= threshold).sum() 
            prec_rate = prec_above / len(precisions) * 100
            
            print(f"   {threshold*100:.0f}%‰ª•‰∏äÁ∂≠ÊåÅ:")
            print(f"     Á≤æÂ∫¶: {acc_above}/{len(accuracies)}ÊúüÈñì ({acc_rate:.1f}%)")
            print(f"     ÈÅ©ÂêàÁéá: {prec_above}/{len(precisions)}ÊúüÈñì ({prec_rate:.1f}%)")
        
        # ÈÄ£Á∂öÊÄßÂàÜÊûê
        consecutive_above_75 = 0
        max_consecutive = 0
        current_consecutive = 0
        
        for acc in accuracies:
            if acc >= 0.75:
                current_consecutive += 1
                max_consecutive = max(max_consecutive, current_consecutive)
            else:
                current_consecutive = 0
        
        print(f"\nüìä ÈÄ£Á∂öÊÄßÂàÜÊûêÔºà75%‰ª•‰∏äÔºâ:")
        print(f"   ÊúÄÂ§ßÈÄ£Á∂öÁ∂≠ÊåÅ: {max_consecutive}ÊúüÈñì")
        
        # „Éú„É©„ÉÜ„Ç£„É™„ÉÜ„Ç£ÂàÜÊûê
        acc_volatility = accuracies.std()
        prec_volatility = precisions.std()
        
        print(f"\nüìâ „Éú„É©„ÉÜ„Ç£„É™„ÉÜ„Ç£ÂàÜÊûê:")
        print(f"   Á≤æÂ∫¶„ÅÆÂ§âÂãïÊÄß: {acc_volatility:.3f} ({acc_volatility*100:.1f}%)")
        print(f"   ÈÅ©ÂêàÁéá„ÅÆÂ§âÂãïÊÄß: {prec_volatility:.3f} ({prec_volatility*100:.1f}%)")
        
        return {
            'accuracy_volatility': acc_volatility,
            'precision_volatility': prec_volatility,
            'max_consecutive_75': max_consecutive
        }
    
    def real_world_scenario_analysis(self):
        """ÂÆüÈÅãÁî®„Ç∑„Éä„É™„Ç™ÂàÜÊûê"""
        logger.info("üåç ÂÆüÈÅãÁî®„Ç∑„Éä„É™„Ç™ÂàÜÊûêÈñãÂßã...")
        
        print(f"\nüåç ÂÆüÈÅãÁî®„Ç∑„Éä„É™„Ç™ÂàÜÊûê:")
        
        # „Ç∑„Éä„É™„Ç™1: ‰øùÂÆàÁöÑÈÅãÁî®Ôºà70%‰ª•‰∏ã„ÅßÂÅúÊ≠¢Ôºâ
        poor_periods = self.df[self.df['accuracy'] < 0.70]
        print(f"\nüìâ Âç±Èô∫ÊúüÈñìÂàÜÊûêÔºà70%Êú™Ê∫ÄÔºâ:")
        print(f"   Áô∫ÁîüÂõûÊï∞: {len(poor_periods)}Âõû / {len(self.df)}ÊúüÈñì ({len(poor_periods)/len(self.df)*100:.1f}%)")
        
        if len(poor_periods) > 0:
            print(f"   ÊúÄ‰ΩéÁ≤æÂ∫¶: {poor_periods['accuracy'].min():.3f} ({poor_periods['accuracy'].min()*100:.1f}%)")
            print(f"   Ë©≤ÂΩìÊúüÈñì‰æã: {poor_periods.iloc[0]['period']}")
        
        # „Ç∑„Éä„É™„Ç™2: ÊúàÊ¨°„É™„Çø„Éº„É≥Ë®àÁÆó
        monthly_returns = []
        daily_trades_per_month = 20  # Âñ∂Ê•≠Êó•
        trades_per_day = 3  # Êé®Â•®ÈäòÊüÑÊï∞
        target_return = 0.01  # 1%‰∏äÊòá
        
        for _, row in self.df.iterrows():
            accuracy = row['accuracy']
            precision = row['precision']
            
            # ÊúàÊ¨°ÊúüÂæÖ„É™„Çø„Éº„É≥Ë®àÁÆó
            expected_return = daily_trades_per_month * trades_per_day * target_return * accuracy
            monthly_returns.append(expected_return)
        
        monthly_returns = np.array(monthly_returns)
        
        print(f"\nüí∞ ÊúüÂæÖÂèéÁõäÁéáÂàÜÊûê:")
        print(f"   Âπ≥ÂùáÊúàÊ¨°ÊúüÂæÖ„É™„Çø„Éº„É≥: {monthly_returns.mean():.1%}")
        print(f"   ÊúàÊ¨°„É™„Çø„Éº„É≥‰∏≠Â§ÆÂÄ§: {np.median(monthly_returns):.1%}")
        print(f"   ÊúÄÈ´òÊúàÊ¨°„É™„Çø„Éº„É≥: {monthly_returns.max():.1%}")
        print(f"   ÊúÄ‰ΩéÊúàÊ¨°„É™„Çø„Éº„É≥: {monthly_returns.min():.1%}")
        print(f"   Âπ¥ÈñìÊúüÂæÖ„É™„Çø„Éº„É≥: {monthly_returns.mean() * 12:.1%}")
        
        # „É™„Çπ„ÇØÂàÜÊûê
        negative_months = (monthly_returns < 0.10).sum()  # 10%Êú™Ê∫Ä„Çí„É™„Çπ„ÇØÊúüÈñì„Å®„Åô„Çã
        print(f"\n‚ö†Ô∏è „É™„Çπ„ÇØÂàÜÊûê:")
        print(f"   ‰Ωé„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúüÈñì: {negative_months}ÊúüÈñì ({negative_months/len(monthly_returns)*100:.1f}%)")
        print(f"   „É™„Çø„Éº„É≥Ê®ôÊ∫ñÂÅèÂ∑Æ: {monthly_returns.std():.1%}")
        
        return {
            'monthly_returns': monthly_returns,
            'poor_periods': len(poor_periods),
            'avg_monthly_return': monthly_returns.mean(),
            'annual_expected_return': monthly_returns.mean() * 12
        }
    
    def create_visualizations(self):
        """ÂèØË¶ñÂåñ‰ΩúÊàê"""
        logger.info("üìä ÂèØË¶ñÂåñ‰ΩúÊàêÈñãÂßã...")
        
        # Âõ≥„ÅÆ„Çµ„Ç§„Ç∫„Å®„Çπ„Çø„Ç§„É´Ë®≠ÂÆö
        plt.style.use('default')
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('Enhanced Precision System V3 ÂÆüÈÅãÁî®ÂàÜÊûê', fontsize=16, fontweight='bold')
        
        # 1. Á≤æÂ∫¶„ÅÆÊôÇÁ≥ªÂàóÊé®Áßª
        axes[0, 0].plot(range(len(self.df)), self.df['accuracy'], 
                       marker='o', linewidth=2, markersize=4, color='blue', alpha=0.7)
        axes[0, 0].axhline(y=0.75, color='red', linestyle='--', alpha=0.7, label='75%ÈñæÂÄ§')
        axes[0, 0].axhline(y=0.80, color='green', linestyle='--', alpha=0.7, label='80%ÈñæÂÄ§')
        axes[0, 0].set_title('Á≤æÂ∫¶„ÅÆÊôÇÁ≥ªÂàóÊé®Áßª (2018-2025)', fontweight='bold')
        axes[0, 0].set_xlabel('ÊúüÈñì')
        axes[0, 0].set_ylabel('Á≤æÂ∫¶')
        axes[0, 0].legend()
        axes[0, 0].grid(True, alpha=0.3)
        
        # 2. Á≤æÂ∫¶ÂàÜÂ∏É
        axes[0, 1].hist(self.df['accuracy'], bins=15, alpha=0.7, color='skyblue', edgecolor='black')
        axes[0, 1].axvline(x=self.df['accuracy'].mean(), color='red', linestyle='-', 
                          linewidth=2, label=f'Âπ≥Âùá: {self.df["accuracy"].mean():.1%}')
        axes[0, 1].axvline(x=self.df['accuracy'].median(), color='green', linestyle='--', 
                          linewidth=2, label=f'‰∏≠Â§ÆÂÄ§: {self.df["accuracy"].median():.1%}')
        axes[0, 1].set_title('Á≤æÂ∫¶ÂàÜÂ∏É', fontweight='bold')
        axes[0, 1].set_xlabel('Á≤æÂ∫¶')
        axes[0, 1].set_ylabel('È†ªÂ∫¶')
        axes[0, 1].legend()
        axes[0, 1].grid(True, alpha=0.3)
        
        # 3. Á≤æÂ∫¶ vs ÈÅ©ÂêàÁéá
        scatter = axes[1, 0].scatter(self.df['accuracy'], self.df['precision'], 
                                   alpha=0.6, c=range(len(self.df)), cmap='viridis')
        axes[1, 0].set_title('Á≤æÂ∫¶ vs ÈÅ©ÂêàÁéá', fontweight='bold')
        axes[1, 0].set_xlabel('Á≤æÂ∫¶')
        axes[1, 0].set_ylabel('ÈÅ©ÂêàÁéá')
        axes[1, 0].grid(True, alpha=0.3)
        
        # 4. Âπ¥Âà•„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ
        # Âπ¥Âà•ÈõÜË®à
        yearly_data = []
        for _, row in self.df.iterrows():
            year = int(row['period'][:4])
            yearly_data.append({'year': year, 'accuracy': row['accuracy'], 'precision': row['precision']})
        
        yearly_df = pd.DataFrame(yearly_data)
        yearly_avg = yearly_df.groupby('year')[['accuracy', 'precision']].mean()
        
        x_pos = range(len(yearly_avg))
        axes[1, 1].bar([p - 0.2 for p in x_pos], yearly_avg['accuracy'], 
                      width=0.4, label='Á≤æÂ∫¶', alpha=0.7, color='blue')
        axes[1, 1].bar([p + 0.2 for p in x_pos], yearly_avg['precision'], 
                      width=0.4, label='ÈÅ©ÂêàÁéá', alpha=0.7, color='orange')
        axes[1, 1].set_title('Âπ¥Âà•Âπ≥Âùá„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ', fontweight='bold')
        axes[1, 1].set_xlabel('Âπ¥')
        axes[1, 1].set_ylabel('Á≤æÂ∫¶/ÈÅ©ÂêàÁéá')
        axes[1, 1].set_xticks(x_pos)
        axes[1, 1].set_xticklabels(yearly_avg.index)
        axes[1, 1].legend()
        axes[1, 1].grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        # ‰øùÂ≠ò
        output_file = self.output_dir / "enhanced_v3_validation_analysis.png"
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        logger.info(f"ÂèØË¶ñÂåñ‰øùÂ≠òÂÆå‰∫Ü: {output_file}")
        
        return output_file
    
    def critical_issues_analysis(self):
        """ÈáçË¶Å„Å™ÂïèÈ°åÁÇπÂàÜÊûê"""
        logger.info("‚ö†Ô∏è ÈáçË¶Å„Å™ÂïèÈ°åÁÇπÂàÜÊûêÈñãÂßã...")
        
        print(f"\n‚ö†Ô∏è ÂÆüÈÅãÁî®„Åß„ÅÆÈáçË¶Å„Å™ÂïèÈ°åÁÇπ„Éª„É™„Çπ„ÇØÂàÜÊûê:")
        
        # 1. „Éá„Éº„ÇøÈÅÖÂª∂ÂïèÈ°å
        print(f"\n1Ô∏è‚É£ „Éá„Éº„ÇøÈÅÖÂª∂„ÉªÂèñÂæóÂïèÈ°å:")
        print(f"   - Â§ñÈÉ®„Éá„Éº„ÇøÔºàUSD/JPY, VIXÁ≠âÔºâ„ÅÆ„É™„Ç¢„É´„Çø„Ç§„É†ÂèñÂæóÈÅÖÂª∂")
        print(f"   - Yahoo Finance API„ÅÆÂà∂Èôê„ÉªÈöúÂÆ≥„É™„Çπ„ÇØ")
        print(f"   - J-Quants API„ÅÆÊó•Ê¨°Êõ¥Êñ∞„Çø„Ç§„Éü„É≥„Ç∞(ÈÄöÂ∏∏15:30È†É)")
        print(f"   ‚Üí Êé®Â•®ÂØæÁ≠ñ: Ë§áÊï∞„Éá„Éº„Çø„ÇΩ„Éº„Çπ‰ΩµÁî®„ÄÅ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Âº∑Âåñ")
        
        # 2. Â∏ÇÂ†¥Áí∞Â¢ÉÂ§âÂåñ
        extreme_periods = self.df[
            (self.df['accuracy'] < 0.72) | 
            (self.df['accuracy'] > 0.84)
        ]
        
        print(f"\n2Ô∏è‚É£ Â∏ÇÂ†¥Áí∞Â¢ÉÊÄ•Â§â„É™„Çπ„ÇØ:")
        print(f"   - Ê•µÁ´Ø„Å™„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúüÈñì: {len(extreme_periods)}Âõû ({len(extreme_periods)/len(self.df)*100:.1f}%)")
        print(f"   - ÊúÄÂ§ßÁ≤æÂ∫¶: {self.df['accuracy'].max():.1%} (ÈÅé‰ø°„É™„Çπ„ÇØ)")
        print(f"   - ÊúÄÂ∞èÁ≤æÂ∫¶: {self.df['accuracy'].min():.1%} (ÈáçÂ§ßÊêçÂ§±„É™„Çπ„ÇØ)")
        print(f"   ‚Üí Êé®Â•®ÂØæÁ≠ñ: „É™„Çπ„ÇØÁÆ°ÁêÜ„É´„Éº„É´Ë®≠ÂÆö„ÄÅÂãïÁöÑ„Éù„Ç∏„Ç∑„Éß„É≥„Çµ„Ç§„Ç∫Ë™øÊï¥")
        
        # 3. „Ç™„Éº„Éê„Éº„Éï„Ç£„ÉÉ„ÉÜ„Ç£„É≥„Ç∞Ê§úÂá∫
        recent_10_acc = self.df.tail(10)['accuracy'].mean()
        overall_acc = self.df['accuracy'].mean()
        recent_vs_overall = recent_10_acc - overall_acc
        
        print(f"\n3Ô∏è‚É£ „Ç™„Éº„Éê„Éº„Éï„Ç£„ÉÉ„ÉÜ„Ç£„É≥„Ç∞„ÉªÂä£Âåñ„É™„Çπ„ÇØ:")
        print(f"   - Áõ¥Ëøë10ÊúüÈñìÂπ≥Âùá: {recent_10_acc:.1%}")
        print(f"   - ÂÖ®ÊúüÈñìÂπ≥Âùá: {overall_acc:.1%}")
        print(f"   - Â∑ÆÁï∞: {recent_vs_overall:+.1%}")
        
        if abs(recent_vs_overall) > 0.02:
            print(f"   ‚ö†Ô∏è Ë≠¶Âëä: Áõ¥Ëøë„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Å´{abs(recent_vs_overall):.1%}‰ª•‰∏ä„ÅÆÂ§âÂåñ")
        else:
            print(f"   ‚úÖ ËâØÂ•Ω: „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂÆâÂÆö")
        
        # 4. ÂèñÂºï„Ç≥„Çπ„Éà„ÉªÊµÅÂãïÊÄß
        print(f"\n4Ô∏è‚É£ ÂèñÂºï„Ç≥„Çπ„Éà„ÉªÊµÅÂãïÊÄß„É™„Çπ„ÇØ:")
        print(f"   - Ë®ºÂà∏‰ºöÁ§æÊâãÊï∞Êñô: Á¥Ñ0.1-0.3%/ÂèñÂºï")
        print(f"   - „Çπ„Éó„É¨„ÉÉ„Éâ„Ç≥„Çπ„Éà: Á¥Ñ0.05-0.2%")
        print(f"   - Â∞èÂûãÊ†™„ÅÆÊµÅÂãïÊÄß„É™„Çπ„ÇØ")
        print(f"   - 1%ÁõÆÊ®ô„Å´ÂØæ„Åô„Çã„Ç≥„Çπ„ÉàÊØîÁéá: 10-50%")
        print(f"   ‚Üí Êé®Â•®ÂØæÁ≠ñ: Â§ßÂûãÊ†™‰∏≠ÂøÉ„ÄÅÊâãÊï∞ÊñôÂÆöÈ°ç„Éó„É©„É≥Âà©Áî®")
        
        # 5. ÂøÉÁêÜÁöÑË¶ÅÂõ†
        losing_streaks = self.analyze_losing_streaks()
        
        print(f"\n5Ô∏è‚É£ ÂøÉÁêÜÁöÑ„ÉªÈÅãÁî®Á∂ôÁ∂ö„É™„Çπ„ÇØ:")
        print(f"   - ÊúÄÂ§ßÈÄ£Á∂ö‰ΩéË™øÊúüÈñì: {losing_streaks['max_streak']}ÊúüÈñì")
        print(f"   - 75%Êú™Ê∫ÄÊúüÈñìÊï∞: {losing_streaks['below_75_count']}ÊúüÈñì")
        print(f"   - ÈÅãÁî®ÂÅúÊ≠¢Ë™òÊÉë„É™„Çπ„ÇØ: È´ò")
        print(f"   ‚Üí Êé®Â•®ÂØæÁ≠ñ: Ê©üÊ¢∞ÁöÑÈÅãÁî®„É´„Éº„É´„ÄÅÊÑüÊÉÖ‰ªãÂÖ•Èò≤Ê≠¢")
        
        return {
            'extreme_periods': len(extreme_periods),
            'recent_performance_change': recent_vs_overall,
            'losing_streaks': losing_streaks
        }
    
    def analyze_losing_streaks(self):
        """ÈÄ£Á∂ö‰ΩéË™øÊúüÈñìÂàÜÊûê"""
        accuracies = self.df['accuracy']
        
        current_streak = 0
        max_streak = 0
        below_75_count = 0
        
        for acc in accuracies:
            if acc < 0.75:
                current_streak += 1
                below_75_count += 1
                max_streak = max(max_streak, current_streak)
            else:
                current_streak = 0
        
        return {
            'max_streak': max_streak,
            'below_75_count': below_75_count,
            'below_75_rate': below_75_count / len(accuracies)
        }
    
    def final_recommendation(self):
        """ÊúÄÁµÇÊé®Â•®‰∫ãÈ†Ö"""
        logger.info("üìù ÊúÄÁµÇÊé®Â•®‰∫ãÈ†ÖÁîüÊàê...")
        
        print(f"\nüìù Enhanced Precision System V3 ÂÆüÈÅãÁî®Êé®Â•®‰∫ãÈ†Ö:")
        print("="*70)
        
        avg_acc = self.df['accuracy'].mean()
        stability = self.df['accuracy'].std()
        
        if avg_acc >= 0.78 and stability <= 0.03:
            recommendation = "üü¢ Êé®Â•®: ÂÆüÈÅãÁî®ÈÅ©Áî®ÂèØËÉΩ"
            confidence = "È´ò"
        elif avg_acc >= 0.75 and stability <= 0.05:
            recommendation = "üü° Êù°‰ª∂‰ªòÊé®Â•®: ÊÖéÈáç„Å™ÂÆüÈÅãÁî®"
            confidence = "‰∏≠"
        else:
            recommendation = "üî¥ ÈùûÊé®Â•®: Êõ¥„Å™„ÇãÊîπÂñÑÂøÖË¶Å"
            confidence = "‰Ωé"
        
        print(f"\n{recommendation}")
        print(f"‰ø°È†ºÂ∫¶: {confidence}")
        
        print(f"\nüìä ÂÆüÈÅãÁî®Âà§ÂÆöÊ†πÊã†:")
        print(f"   - Âπ≥ÂùáÁ≤æÂ∫¶: {avg_acc:.1%} (ÁõÆÊ®ô: ‚â•75%)")
        print(f"   - ÂÆâÂÆöÊÄß: {stability:.1%} (ÁõÆÊ®ô: ‚â§5%)")
        print(f"   - 75%‰ª•‰∏äÁ∂≠ÊåÅÁéá: {(self.df['accuracy'] >= 0.75).mean():.1%}")
        
        print(f"\n‚úÖ ÂÆüÈÅãÁî®„Åß„ÅÆÊàêÂäüË¶ÅÂõ†:")
        print(f"   1. 7Âπ¥Èñì„ÅÆÈï∑ÊúüÊ§úË®ºÊ∏à„ÅøÔºà2018-2025Ôºâ")
        print(f"   2. „Ç¶„Ç©„Éº„ÇØ„Éï„Ç©„ÉØ„Éº„Éâ„Å´„Çà„ÇãÊú™Êù•„Éá„Éº„ÇøÊºèÊ¥©Èò≤Ê≠¢")
        print(f"   3. Â§ñÈÉ®„Éá„Éº„ÇøÁµ±Âêà„Å´„Çà„ÇãÁí∞Â¢ÉÂ§âÂåñÂØæÂøú")
        print(f"   4. ÊúàÊ¨°„É™„Éê„É©„É≥„Çπ„Å´„Çà„ÇãÁèæÂÆüÁöÑÈÅãÁî®Âë®Êúü")
        
        print(f"\n‚ö†Ô∏è ÂÆüÈÅãÁî®„Åß„ÅÆÊ≥®ÊÑèÁÇπ:")
        print(f"   1. „Éá„Éº„ÇøÂèñÂæóÈÅÖÂª∂„ÉªÈöúÂÆ≥ÂØæÁ≠ñÂøÖÈ†à")
        print(f"   2. ÂèñÂºï„Ç≥„Çπ„Éà„ÇíËÄÉÊÖÆ„Åó„ÅüÈäòÊüÑÈÅ∏Êäû")
        print(f"   3. 70%Êú™Ê∫ÄÊôÇ„ÅÆÈÅãÁî®ÂÅúÊ≠¢„É´„Éº„É´Ë®≠ÂÆö")
        print(f"   4. ÊÑüÊÉÖ‰ªãÂÖ•Èò≤Ê≠¢„ÅÆÊ©üÊ¢∞ÁöÑÈÅãÁî®")
        print(f"   5. ÂÆöÊúüÁöÑ„Å™„Ç∑„Çπ„ÉÜ„É†Ë¶ãÁõ¥„ÅóÔºà3„É∂ÊúàÊØéÔºâ")
        
        return {
            'recommendation': recommendation,
            'confidence': confidence,
            'avg_accuracy': avg_acc,
            'stability': stability
        }
    
    def run_full_validation(self):
        """ÂÆåÂÖ®Ê§úË®ºÂÆüË°å"""
        logger.info("üöÄ Enhanced Precision System V3 ÂÆüÈÅãÁî®Ê§úË®ºÈñãÂßã!")
        
        try:
            # ÂêÑÁ®ÆÂàÜÊûêÂÆüË°å
            basic_stats = self.analyze_basic_statistics()
            consistency = self.analyze_consistency()
            scenarios = self.real_world_scenario_analysis()
            issues = self.critical_issues_analysis()
            visualization = self.create_visualizations()
            recommendation = self.final_recommendation()
            
            # ÊúÄÁµÇÁµêÊûú„Åæ„Å®„ÇÅ
            print(f"\nüéâ Enhanced Precision System V3 ÂÆüÈÅãÁî®Ê§úË®ºÂÆå‰∫Ü!")
            print(f"Ê§úË®ºÊúüÈñì: 2018Âπ¥10Êúà„Äú2025Âπ¥9Êúà ({len(self.df)}ÊúüÈñì)")
            print(f"ÂèØË¶ñÂåñ„Éï„Ç°„Ç§„É´: {visualization}")
            
            return {
                'basic_stats': basic_stats,
                'consistency': consistency,
                'scenarios': scenarios,
                'issues': issues,
                'recommendation': recommendation,
                'visualization': str(visualization)
            }
            
        except Exception as e:
            logger.error(f"Ê§úË®º„Ç®„É©„Éº: {e}")
            return None

def main():
    """„É°„Ç§„É≥ÂÆüË°å"""
    validator = RealWorldValidator()
    results = validator.run_full_validation()
    
    if results:
        print(f"\n‚úÖ ÂÆüÈÅãÁî®Ê§úË®ºÂÆå‰∫Ü!")
        print(f"Ë©≥Á¥∞„Å™ÂàÜÊûêÁµêÊûú„Åå‰∏äË®ò„Å´Ë°®Á§∫„Åï„Çå„Åæ„Åó„Åü„ÄÇ")
    else:
        print(f"\n‚ùå ÂÆüÈÅãÁî®Ê§úË®º„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")

if __name__ == "__main__":
    main()