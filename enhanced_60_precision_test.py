#!/usr/bin/env python3
"""
拡張データによる60%精度達成テスト
ファンダメンタル + マーケットデータ統合版
"""

import pandas as pd
import numpy as np
from datetime import datetime
import lightgbm as lgb
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.preprocessing import RobustScaler
from sklearn.feature_selection import SelectKBest, f_classif
import warnings
warnings.filterwarnings('ignore')

from enhanced_data_integration import EnhancedDataIntegration
from loguru import logger

class Enhanced60PrecisionTest:
    """拡張データによる60%精度テスト"""
    
    def __init__(self):
        self.enhanced_data_file = "data/processed/enhanced_integrated_data.parquet"
        self.results = []
        
    def load_enhanced_data(self) -> pd.DataFrame:
        """拡張統合データを読み込み"""
        try:
            df = pd.read_parquet(self.enhanced_data_file)
            logger.success(f"✅ 拡張データ読み込み: {len(df)}件")
            return df
        except FileNotFoundError:
            logger.warning("拡張データファイルが見つかりません。統合処理を実行します...")
            
            # データ統合実行
            integrator = EnhancedDataIntegration()
            df = integrator.run_integration()\n            \n            if df.empty:\n                logger.error("データ統合に失敗しました")\n                return pd.DataFrame()\n            \n            return df\n        except Exception as e:\n            logger.error(f"❌ データ読み込み失敗: {e}")\n            return pd.DataFrame()\n    \n    def select_features(self, X_train, y_train, max_features: int = 30) -> list:\n        """特徴量選択（統計的手法）"""\n        try:\n            selector = SelectKBest(score_func=f_classif, k=min(max_features, X_train.shape[1]))\n            selector.fit(X_train, y_train)\n            \n            selected_features = X_train.columns[selector.get_support()].tolist()\n            scores = selector.scores_[selector.get_support()]\n            \n            # 特徴量重要度でソート\n            feature_scores = list(zip(selected_features, scores))\n            feature_scores.sort(key=lambda x: x[1], reverse=True)\n            \n            logger.info(f"✅ 特徴量選択完了: {len(selected_features)}個選択")\n            \n            # トップ10特徴量を表示\n            logger.info("📊 重要特徴量トップ10:")\n            for i, (feature, score) in enumerate(feature_scores[:10]):\n                logger.info(f"  {i+1}. {feature}: {score:.2f}")\n            \n            return selected_features\n            \n        except Exception as e:\n            logger.error(f"特徴量選択でエラー: {e}")\n            # フォールバック：全特徴量を使用\n            return X_train.columns.tolist()\n    \n    def run_enhanced_strategies(self, df: pd.DataFrame) -> list:\n        """拡張戦略群の実行"""\n        logger.info("🚀 拡張戦略群による60%精度チャレンジ開始")\n        \n        # データ準備\n        df_sorted = df.sort_values(['Stock', 'Date'])\n        unique_dates = sorted(df_sorted['Date'].unique())\n        test_dates = unique_dates[-30:]  # 最新30日\n        \n        logger.info(f"テスト期間: {len(test_dates)}日間")\n        \n        # 特徴量カラム抽出\n        feature_cols = [col for col in df.columns if col not in ['Date', 'Stock', 'Target', 'next_high']]\n        logger.info(f"総特徴量数: {len(feature_cols)}")\n        \n        strategies_results = []\n        \n        # === 戦略1: 拡張LightGBM + 特徴量選択 + 上位3銘柄 ===\n        logger.info("\\n🎯 戦略1: 拡張LightGBM + 特徴量選択")\n        \n        strategy1_preds = []\n        strategy1_actuals = []\n        \n        for i, test_date in enumerate(test_dates[-15:]):  # 最新15日でテスト\n            train_data = df_sorted[df_sorted['Date'] < test_date]\n            test_data = df_sorted[df_sorted['Date'] == test_date]\n            \n            train_clean = train_data.dropna(subset=['Target'] + feature_cols)\n            test_clean = test_data.dropna(subset=['Target'] + feature_cols)\n            \n            if len(train_clean) < 1000 or len(test_clean) < 5:\n                continue\n            \n            X_train_full = train_clean[feature_cols]\n            y_train = train_clean['Target']\n            X_test_full = test_clean[feature_cols]\n            y_test = test_clean['Target']\n            \n            # 特徴量選択\n            selected_features = self.select_features(X_train_full, y_train, max_features=25)\n            \n            X_train = X_train_full[selected_features]\n            X_test = X_test_full[selected_features]\n            \n            # スケーリング\n            scaler = RobustScaler()\n            X_train_scaled = scaler.fit_transform(X_train)\n            X_test_scaled = scaler.transform(X_test)\n            \n            # 拡張LightGBMモデル\n            model = lgb.LGBMClassifier(\n                n_estimators=200,\n                max_depth=4,\n                min_child_samples=15,\n                subsample=0.85,\n                colsample_bytree=0.85,\n                learning_rate=0.08,\n                reg_alpha=0.1,\n                reg_lambda=0.1,\n                random_state=42,\n                verbose=-1\n            )\n            \n            model.fit(X_train_scaled, y_train)\n            probs = model.predict_proba(X_test_scaled)[:, 1]\n            \n            # 上位3銘柄選択\n            n_select = min(3, len(probs))\n            top_indices = np.argsort(probs)[-n_select:]\n            \n            selected_actuals = y_test.iloc[top_indices].values\n            strategy1_preds.extend([1] * len(selected_actuals))\n            strategy1_actuals.extend(selected_actuals)\n            \n            if i % 5 == 0:\n                logger.info(f"  進捗: {i+1}/15")\n        \n        if strategy1_preds:\n            precision1 = sum(strategy1_actuals) / len(strategy1_actuals)\n            strategies_results.append(('拡張LightGBM上位3', precision1, len(strategy1_preds)))\n            logger.info(f"  戦略1結果: {precision1:.2%}")\n        \n        # === 戦略2: アンサンブル + 上位2銘柄 ===\n        logger.info("\\n🔥 戦略2: 拡張アンサンブル")\n        \n        models = [\n            lgb.LGBMClassifier(n_estimators=150, max_depth=4, learning_rate=0.08, random_state=42, verbose=-1),\n            RandomForestClassifier(n_estimators=150, max_depth=5, min_samples_split=20, random_state=43),\n            GradientBoostingClassifier(n_estimators=100, max_depth=4, learning_rate=0.1, random_state=44)\n        ]\n        \n        strategy2_preds = []\n        strategy2_actuals = []\n        \n        for test_date in test_dates[-15:]:\n            train_data = df_sorted[df_sorted['Date'] < test_date]\n            test_data = df_sorted[df_sorted['Date'] == test_date]\n            \n            train_clean = train_data.dropna(subset=['Target'] + feature_cols)\n            test_clean = test_data.dropna(subset=['Target'] + feature_cols)\n            \n            if len(train_clean) < 1000 or len(test_clean) < 3:\n                continue\n            \n            X_train_full = train_clean[feature_cols]\n            y_train = train_clean['Target']\n            X_test_full = test_clean[feature_cols]\n            y_test = test_clean['Target']\n            \n            # 特徴量選択\n            selected_features = self.select_features(X_train_full, y_train, max_features=20)\n            X_train = X_train_full[selected_features]\n            X_test = X_test_full[selected_features]\n            \n            # スケーリング\n            scaler = RobustScaler()\n            X_train_scaled = scaler.fit_transform(X_train)\n            X_test_scaled = scaler.transform(X_test)\n            \n            # アンサンブル予測\n            ensemble_probs = []\n            for model in models:\n                model.fit(X_train_scaled, y_train)\n                probs = model.predict_proba(X_test_scaled)[:, 1]\n                ensemble_probs.append(probs)\n            \n            # 加重平均（LightGBMを重視）\n            avg_probs = (0.4 * ensemble_probs[0] + 0.3 * ensemble_probs[1] + 0.3 * ensemble_probs[2])\n            \n            # 上位2銘柄選択\n            n_select = min(2, len(avg_probs))\n            top_indices = np.argsort(avg_probs)[-n_select:]\n            \n            selected_actuals = y_test.iloc[top_indices].values\n            strategy2_preds.extend([1] * len(selected_actuals))\n            strategy2_actuals.extend(selected_actuals)\n        \n        if strategy2_preds:\n            precision2 = sum(strategy2_actuals) / len(strategy2_actuals)\n            strategies_results.append(('拡張アンサンブル上位2', precision2, len(strategy2_preds)))\n            logger.info(f"  戦略2結果: {precision2:.2%}")\n        \n        # === 戦略3: 超厳選1銘柄（高閾値） ===\n        logger.info("\\n💎 戦略3: 超厳選1銘柄")\n        \n        strategy3_preds = []\n        strategy3_actuals = []\n        \n        for test_date in test_dates[-15:]:\n            train_data = df_sorted[df_sorted['Date'] < test_date]\n            test_data = df_sorted[df_sorted['Date'] == test_date]\n            \n            train_clean = train_data.dropna(subset=['Target'] + feature_cols)\n            test_clean = test_data.dropna(subset=['Target'] + feature_cols)\n            \n            if len(train_clean) < 1000 or len(test_clean) < 2:\n                continue\n            \n            X_train_full = train_clean[feature_cols]\n            y_train = train_clean['Target']\n            X_test_full = test_clean[feature_cols]\n            y_test = test_clean['Target']\n            \n            # より多くの特徴量を使用（30個）\n            selected_features = self.select_features(X_train_full, y_train, max_features=30)\n            X_train = X_train_full[selected_features]\n            X_test = X_test_full[selected_features]\n            \n            scaler = RobustScaler()\n            X_train_scaled = scaler.fit_transform(X_train)\n            X_test_scaled = scaler.transform(X_test)\n            \n            # 高精度モデル\n            model = lgb.LGBMClassifier(\n                n_estimators=300,\n                max_depth=5,\n                min_child_samples=10,\n                subsample=0.9,\n                colsample_bytree=0.9,\n                learning_rate=0.05,\n                reg_alpha=0.2,\n                reg_lambda=0.2,\n                random_state=42,\n                verbose=-1\n            )\n            \n            model.fit(X_train_scaled, y_train)\n            probs = model.predict_proba(X_test_scaled)[:, 1]\n            \n            # 最高確率の1銘柄のみ（75%以上の場合）\n            best_prob = np.max(probs)\n            if best_prob >= 0.75:\n                best_idx = np.argmax(probs)\n                selected_actuals = [y_test.iloc[best_idx]]\n                strategy3_preds.extend([1])\n                strategy3_actuals.extend(selected_actuals)\n        \n        if strategy3_preds:\n            precision3 = sum(strategy3_actuals) / len(strategy3_actuals)\n            strategies_results.append(('超厳選1銘柄75%閾値', precision3, len(strategy3_preds)))\n            logger.info(f"  戦略3結果: {precision3:.2%}")\n        \n        return strategies_results\n    \n    def run_test(self):\n        """60%精度テスト実行"""\n        logger.info("🎯 拡張データによる60%精度達成テスト開始")\n        \n        # データ読み込み\n        df = self.load_enhanced_data()\n        if df.empty:\n            logger.error("拡張データが利用できません")\n            return False\n        \n        # データ品質確認\n        target_positive_rate = df['Target'].mean()\n        logger.info(f"データ概要: {len(df):,}件, 陽性率{target_positive_rate:.2%}")\n        \n        # 戦略実行\n        results = self.run_enhanced_strategies(df)\n        \n        # 結果報告\n        print("\\n" + "="*80)\n        print("🎯 拡張データによる60%精度達成テスト結果")\n        print("="*80)\n        \n        print(f"{'戦略名':<25} {'精度':<12} {'選択数':<8} {'60%達成':<10}")\n        print("-"*65)\n        \n        success_found = False\n        best_result = None\n        best_precision = 0\n        \n        for name, precision, count in sorted(results, key=lambda x: x[1], reverse=True):\n            status = "✅ YES" if precision >= 0.60 else "❌ NO"\n            print(f"{name:<25} {precision:<12.2%} {count:<8d} {status:<10}")\n            \n            if precision > best_precision:\n                best_precision = precision\n                best_result = (name, precision, count)\n            \n            if precision >= 0.60:\n                success_found = True\n        \n        if success_found:\n            print(f"\\n🎉 【60%精度達成成功！】")\n            print(f"✅ 最高精度: {best_precision:.2%}")\n            print(f"✅ 成功戦略: {best_result[0]}")\n            print(f"✅ 選択銘柄数: {best_result[2]}")\n            \n            # 成功記録\n            with open('enhanced_60_success.txt', 'w') as f:\n                f.write(f"60%精度達成成功！\\n")\n                f.write(f"達成精度: {best_precision:.2%}\\n")\n                f.write(f"戦略: {best_result[0]}\\n")\n                f.write(f"選択数: {best_result[2]}\\n")\n                f.write(f"使用データ: 拡張統合データ（ファンダメンタル+マーケット）\\n")\n                f.write(f"達成時刻: {datetime.now()}\\n")\n            \n            print(\"\\n💾 成功記録保存完了\")\n            \n            # 実用設定提案\n            print(f\"\\n🔧 【実用設定推奨】\")\n            if '上位3' in best_result[0]:\n                print(\"daily_target: 3銘柄\")\n                print(\"model_type: 'enhanced_lightgbm'\")\n                print(\"feature_selection: true\")\n            elif '上位2' in best_result[0]:\n                print(\"daily_target: 2銘柄\")\n                print(\"model_type: 'enhanced_ensemble'\")\n            else:\n                print(\"daily_target: 1銘柄\")\n                print(\"model_type: 'ultra_selective'\")\n                print(\"confidence_threshold: 0.75\")\n            \n            print(\"data_source: 'enhanced_integrated_data'\")\n            \n            return True\n            \n        else:\n            print(f\"\\n⚠️ 【60%未達成】\")\n            if best_result:\n                print(f"最高精度: {best_precision:.2%}")\n                print(f"目標まで: +{0.60 - best_precision:.2%}")\n                print(f"最良戦略: {best_result[0]}")\n            \n            print(f\"\\n📊 分析結果:\")\n            if best_precision >= 0.55:\n                print(f"- 従来の56%から改善が見られます\")\n                print(f"- さらなるデータ統合で60%達成可能\")\n            else:\n                print(f\"- データ品質の再確認が必要\")\n                print(f\"- 特徴量エンジニアリングの改善が必要\")\n            \n            return False\n        \n        print(\"\\n\" + \"=\"*80)\n\n# 実行\nif __name__ == \"__main__\":\n    test = Enhanced60PrecisionTest()\n    success = test.run_test()\n    \n    if success:\n        print(\"\\n🎉 60%精度達成成功！拡張データの効果が実証されました！\")\n    else:\n        print(\"\\n⚠️ さらなるデータ統合または手法改善が必要です\")